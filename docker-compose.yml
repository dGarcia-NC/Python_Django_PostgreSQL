# Version of the docker compose syntax that we're going to be using
version: "3.9"

# Docker compose files usually consist of one or more services
services:
  # App is the name of the service that's going to run our docker file
  app:
    # Build context in the current directory
    build:
      # Dot means current directory
      context: .
      # Set build argument equal to true
      args:
        - DEV=true
    # Maps port 8000 on our local machine to port 8000 in our local container
    ports:
      - "8000:8000"
    # Volumes are a way of mapping directories from our system onto our docker container
    # We want the updates made to our code in our local project reflected in the running container in real-time
    volumes:
      - ./app:/app
    # Waits for the database to be available, once it passes
    # It runs migrations and applies any changes to our database, once it's complete
    # We run the server
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate  &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      # db is the name of the service we created below so we can use that here
      - DB_HOST=db
      # The next three variables should match the credentials we created below in the db environment
      # in order to connect to the db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    # This will make the app service to wait for the db to finish initializing before app tries to interact with it
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    # Mapping the volume created below this file to the postgesql volume so they're persisted
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    # Set the initial database configuration for the new db service
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

# Create a volume named dev-db-data stored on default location of the file system
volumes:
  dev-db-data:
